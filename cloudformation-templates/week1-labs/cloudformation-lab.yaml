AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create an EC2 instance associated with a Security Group, with instance type as a parameter and mapping to select ImageId.

Parameters:
  InstanceType:
    Description: Type of EC2 instance to launch (e.g., t2.micro, t3.small)
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
      - m5.large
      - m5.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: must specify prod or test.

Conditions:
  DetermineEmail: !Equals 
    - !Ref EnvType
    - prod

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0182f373e66f89c85  # Example AMI ID for us-east-1
    us-west-1:
      AMI: ami-025258b26b492aec6  # Example AMI ID for us-west-1
    us-west-2:
      AMI: ami-0bfddf4206f1fa7b9  # Oregon

Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: DefaultVPC

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: MySubnet

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH access from anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !FindInMap 
        - RegionMap
        - !Ref "AWS::Region"
        - AMI
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref MySubnet
      Tags:
        - Key: Name
          Value: MyEC2Instance
    DependsOn: RootInstanceProfile

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"
        
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !If [DetermineEmail, "djvruio@yahoo.com", "djvruio.001@gmail.com"]
          Protocol: "email"

Outputs:
  InstanceId:
    Description: The Instance ID of the EC2 instance
    Value: !Ref MyEC2Instance
  SecurityGroupId:
    Description: The Security Group ID
    Value: !Ref MySecurityGroup
  PublicIp:
    Description: The public IP address of the instance
    Value: !Ref MyEC2Instance
